  <div class="col-lg-12 mb-3">
    <div class="image-preview" id="imagePreview">
      <img src="" id="imagePreviewImg" alt="画像を投稿してください">
    </div>
      <%= f.label :image %>
      <%= f.file_field :image, id: 'imageField' %>
  </div>
        
  <div class="col-lg-12">
    <div class="form-group">
      <%= f.label :title, raw("料理名" + content_tag(:span, "（必須）", class: "required-label")) %>
      <%= f.text_field :title, class: 'form-control' %>
    </div>
    
    <div class="form-group">
      <%= f.label :description, "料理ポイント" %>
      <%= f.text_area :description, class: 'form-control' %>
    </div>
    
    <div class="form-group">
      <%= f.label :tag_list, "タグを入力してボタンで追加", class: 'form-control-label' %>
      <div class="input-group">
        <%= f.text_field :tag_list, id: 'tag-input', placeholder: "揚げ物", class: 'form-control' %>
        <div class="input-group-append">
          <button id="add-tag-btn" class="btn btn-info" type="button">タグ追加</button>
        </div>
      </div>
      <div id="tags-display"></div>
      <input type="hidden" id="actual-tag-list" name="post[tag_list]" value="">
    </div>

    <div class="form-group">
      <%= f.label :season, raw("季節" + content_tag(:span, "（必須）", class: "required-label")) %>
      <%= f.select :season, Post::SEASONS, {}, class: 'form-control' %>
    </div>
      
    <div class="form-group">
      <%= f.label :main_vegetable, raw("メイン野菜" + content_tag(:span, "（必須）", class: "required-label")) %>
      <%= f.text_field :main_vegetable, class: 'form-control' %>
    </div>
    
    <div class="form-group col-lg-4">
      <%= f.label :serving_size,"何人前?" %>
      <%= f.number_field :serving_size, placeholder: "2", in: 1..100, class: 'form-control light-placeholder' %>
    </div>
    
   <!-- 材料、分量フォームの隠し要素テンプレート、display: noneを指定しているため表示はされない -->
    <div id="ingredient-fields-template" style="display: none;">
      <!-- 新しいIngredientオブジェクトを作成, 新たに追加されるフォームに一意なインデックスを付与 -->
      <%= f.fields_for :ingredients, Ingredient.new, child_index: "new_ingredient" do |ingredient_field| %>
        <%= render 'ingredient_fields', f: ingredient_field %>
      <% end %>
    </div>
          
    <!--すでにデータベースに保存されているか、または新しくユーザーが追加した「材料」に関する情報を表示するためのフォーム-->
    <%= f.fields_for :ingredients do |ingredient_field| %>
      <%= render 'ingredient_fields', f: ingredient_field %>
    <% end %>
    <div id="ingredients"></div>
    <div>
      <!--材料、分量フォームを追加できる-->
      <button type="button" id="add-ingredient" class="btn mb-4"  style="background-color: #FFD5EC;">材料を追加</button>
    </div>
    
    <!--作り方フォームの隠し要素テンプレート-->
    <div id="recipe_step-fields-template" style="display: none;">
      <!--新しいRecipeStepオブジェクトを作成-->
      <%= f.fields_for :recipe_steps, RecipeStep.new, child_index: "new_recipe_step" do |recipe_step_field| %>
        <%= render 'recipe_step_fields', f: recipe_step_field %>
      <% end %>
    </div>
    
    <!--すでにデータベースに存在するか、または新しく追加された「作り方」ステップを表示するフォーム-->
    <%= f.fields_for :recipe_steps do |recipe_step_field| %>
      <%= render 'recipe_step_fields', f: recipe_step_field %>
    <% end %>
    <div id="recipe_steps"></div>
    <div>
      <!--作り方フォームを追加できる-->
      <button type="button" id="add-recipe_step" class="btn"  style="background-color: #FFD5EC;">作り方を追加</button>
    </div>

    <div class="form-group mt-3 custom-radio mt-4">
      <h5><%= f.label :is_public,raw("公開しますか？" + content_tag(:span, "（必須）", class: "required-label")) %></h5>
      <div class="form-check form-check-inline">
        <%= f.radio_button :is_public, true, class: 'form-check-input' %>
        <label class="form-check-label">はい</label>
      </div>
      <div class="form-check form-check-inline">
        <%= f.radio_button :is_public, false, class: 'form-check-input' %>
        <label class="form-check-label">いいえ</label>
      </div>
    </div>
  </div>
  
  
<!--タグを動的に追加する-->
<script>
 // ページが読み込まれた後の処理を記述
  document.addEventListener('DOMContentLoaded', function() {
    // 各要素の参照を取得
    const tagInput = document.getElementById('tag-input');
    const addTagBtn = document.getElementById('add-tag-btn');
    const tagsDisplay = document.getElementById('tags-display');
    const actualTagList = document.getElementById('actual-tag-list');
    
    // タグ追加ボタンがクリックされた際の処理
    addTagBtn.addEventListener('click', function() {
       // 入力されたタグの値を取得し、前後の空白を削除
        const tagValue = tagInput.value.trim();
       
        // タグが入力されていた場合のみ以下の処理を実行
        if (tagValue !== "") {
            // 新しいタグ要素を作成し、テキストとして入力値を設定
            const tagSpan = document.createElement('span');
            tagSpan.className = 'badge badge-primary mr-2';
            tagSpan.textContent = tagValue;
  
            // タグの右側に表示する削除アイコンを作成
            const closeIcon = document.createElement('i');
            closeIcon.className = 'fas fa-times close-tag-icon';
            tagSpan.appendChild(closeIcon);
            tagsDisplay.appendChild(tagSpan);

            // 実際の送信用タグリストに追加
            const currentTags = actualTagList.value.split(',').filter(tag => tag !== "");
            currentTags.push(tagValue);
            actualTagList.value = currentTags.join(',');
  
            // 入力フィールドをクリア
            tagInput.value = "";
        }
    });
  
    tagsDisplay.addEventListener('click', function(e) {
        if (e.target.classList.contains('close-tag-icon')) {
            const tagToRemove = e.target.parentNode.childNodes[0].nodeValue.trim();
            e.target.parentNode.remove();
  
            // 実際の送信用タグリストから削除
            const currentTags = actualTagList.value.split(',');
            const index = currentTags.indexOf(tagToRemove);
            if (index > -1) {
                currentTags.splice(index, 1);
                actualTagList.value = currentTags.join(',');
            }
        }
    });
  });
</script>
