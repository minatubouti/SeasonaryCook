  <div class="col-lg-12 mb-3">
    <div class="image-preview" id="imagePreview">
      <img src="" id="imagePreviewImg" alt="画像を投稿してください">
    </div>
      <%= f.label :image %>
      <%= f.file_field :image, id: 'imageField' %>
  </div>
        
  <div class="col-lg-12">
    <div class="form-group">
      <%= f.label :title, raw("料理名" + content_tag(:span, "（必須）", class: "required-label")) %>
      <%= f.text_field :title, class: 'form-control' %>
    </div>
    
    <div class="form-group">
      <%= f.label :description, "料理ポイント" %>
      <%= f.text_area :description, class: 'form-control' %>
    </div>
    
    <div class="form-group">
      <%= f.label :tag_list, "タグを入力してボタンで追加", class: 'form-control-label' %>
      <div class="input-group">
        <!--valueを設定してタグの読み込み時にフォームをクリアにする-->
        <%= f.text_field :tag_list, id: 'tag-input', placeholder: "揚げ物", class: 'form-control', value: '' %>
        <div class="input-group-append">
          <button id="add-tag-btn" class="btn btn-info" type="button">タグ追加</button>
        </div>
      </div>
      <!--JSON形式の文字列に変換し、カスタムデータに保存して、表示エリアに表示させる-->
      <div id="tags-display" data-tags='<%= @post.tag_list.to_json %>'></div>
      <!-- 実際にフォームとして送信されるタグのリスト（隠れている） -->
      <input type="hidden" id="actual-tag-list" name="post[tag_list]" value="">
    </div>

    <div class="form-group">
      <%= f.label :season, raw("季節" + content_tag(:span, "（必須）", class: "required-label")) %>
      <%= f.select :season, Post::SEASONS, {}, class: 'form-control' %>
    </div>
      
    <div class="form-group">
      <%= f.label :main_vegetable, raw("メイン野菜" + content_tag(:span, "（必須）", class: "required-label")) %>
      <%= f.text_field :main_vegetable, class: 'form-control' %>
    </div>
    
    <div class="form-group col-lg-4">
      <%= f.label :serving_size,"何人前?" %>
      <%= f.number_field :serving_size, placeholder: "2", in: 1..100, class: 'form-control light-placeholder' %>
    </div>
    
   <!-- 材料、分量フォームの隠し要素テンプレート、display: noneを指定しているため表示はされない -->
    <div id="ingredient-fields-template" style="display: none;">
      <!-- 新しいIngredientオブジェクトを作成, 新たに追加されるフォームに一意なインデックスを付与 -->
      <%= f.fields_for :ingredients, Ingredient.new, child_index: "new_ingredient" do |ingredient_field| %>
        <%= render 'ingredient_fields', f: ingredient_field %>
      <% end %>
    </div>
          
    <!--すでにデータベースに保存されているか、または新しくユーザーが追加した「材料」に関する情報を表示するためのフォーム-->
    <%= f.fields_for :ingredients do |ingredient_field| %>
      <%= render 'ingredient_fields', f: ingredient_field %>
    <% end %>
    <div id="ingredients"></div>
    <div>
      <!--材料、分量フォームを追加できる-->
      <button type="button" id="add-ingredient" class="btn mb-4"  style="background-color: #FFD5EC;">材料を追加</button>
    </div>
    
    <!--作り方フォームの隠し要素テンプレート-->
    <div id="recipe_step-fields-template" style="display: none;">
      <!--新しいRecipeStepオブジェクトを作成-->
      <%= f.fields_for :recipe_steps, RecipeStep.new, child_index: "new_recipe_step" do |recipe_step_field| %>
        <%= render 'recipe_step_fields', f: recipe_step_field %>
      <% end %>
    </div>
    
    <!--すでにデータベースに存在するか、または新しく追加された「作り方」ステップを表示するフォーム-->
    <%= f.fields_for :recipe_steps do |recipe_step_field| %>
      <%= render 'recipe_step_fields', f: recipe_step_field %>
    <% end %>
    <div id="recipe_steps"></div>
    <div>
      <!--作り方フォームを追加できる-->
      <button type="button" id="add-recipe_step" class="btn"  style="background-color: #FFD5EC;">作り方を追加</button>
    </div>

    <div class="form-group mt-3 custom-radio mt-4">
      <h5><%= f.label :is_public,raw("公開しますか？" + content_tag(:span, "（必須）", class: "required-label")) %></h5>
      <div class="form-check form-check-inline">
        <%= f.radio_button :is_public, true, class: 'form-check-input' %>
        <label class="form-check-label">はい</label>
      </div>
      <div class="form-check form-check-inline">
        <%= f.radio_button :is_public, false, class: 'form-check-input' %>
        <label class="form-check-label">いいえ</label>
      </div>
    </div>
  </div>
  
  
<!--タグを動的に追加する-->
<script>
// ページの読み込みが完了したら実行される関数
  document.addEventListener('DOMContentLoaded', function() {
      // 各要素の参照を取得
      const tagInput = document.getElementById('tag-input');        // タグ入力フィールド
      const addTagBtn = document.getElementById('add-tag-btn');     // タグ追加ボタン
      const tagsDisplay = document.getElementById('tags-display');  // タグ表示エリア
      const actualTagList = document.getElementById('actual-tag-list'); // 実際に送信されるタグのリスト
      
      // タグを画面に表示し、送信用のタグリストにも追加する関数
      function addAndDisplayTag(tagValue) {
          // タグが空でないか、すでに存在しないかを確認
          if (tagValue === "" || actualTagList.value.split(',').includes(tagValue)) {      
              return; // すでに存在する、または空のタグは登録されない
          }
  
          // タグを表示するためのspan要素を作成
          const tagSpan = document.createElement('span');
          tagSpan.className = 'badge badge-primary tag mr-2';
          tagSpan.textContent = tagValue;
          
          // タグの削除用のアイコンを作成
          const closeIcon = document.createElement('i');
          closeIcon.className = 'fas fa-times close-tag-icon';
          tagSpan.appendChild(closeIcon);
          
          // 作成したタグ要素を画面に追加
          tagsDisplay.appendChild(tagSpan);
  
          // 送信用のタグリストに新しいタグを追加
          const currentTags = actualTagList.value.split(',').filter(tag => tag !== "");
          currentTags.push(tagValue);
          actualTagList.value = currentTags.join(',');
      }
  
      // 既存のタグを初期表示する
      const initialTags = JSON.parse(tagsDisplay.getAttribute('data-tags') || '[]');
      initialTags.forEach(tag => {
          addAndDisplayTag(tag);
      });
      
      // タグ追加ボタンがクリックされたときの処理
      addTagBtn.addEventListener('click', function() {
          // タグ入力フィールドの値を取得
          const tagValue = tagInput.value.trim();
          // タグを画面と送信用リストに追加
          addAndDisplayTag(tagValue);
          // タグ入力フィールドをリセット
          tagInput.value = "";
      });
  
      // タグの削除アイコンがクリックされたときの処理
      tagsDisplay.addEventListener('click', function(e) {
          if (e.target.classList.contains('close-tag-icon')) {
              // クリックされたタグの値を取得
              const tagToRemove = e.target.parentNode.childNodes[0].nodeValue.trim();
              // タグを画面から削除
              e.target.parentNode.remove();
  
              // クリックされたタグを送信用のリストからも削除
              const currentTags = actualTagList.value.split(',');
              const index = currentTags.indexOf(tagToRemove);
              if (index > -1) {
                  currentTags.splice(index, 1);
                  actualTagList.value = currentTags.join(',');
              }
          }
      });
  });
</script>
