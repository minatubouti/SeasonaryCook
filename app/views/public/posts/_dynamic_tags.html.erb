<!--タグを動的に追加する-->
<script>
// ページの読み込みが完了したら実行される関数
  document.addEventListener('DOMContentLoaded', function() {
      // 各要素の参照を取得
      const tagInput = document.getElementById('tag-input');        // タグ入力フィールド
      const addTagBtn = document.getElementById('add-tag-btn');     // タグ追加ボタン
      const tagsDisplay = document.getElementById('tags-display');  // タグ表示エリア
      const actualTagList = document.getElementById('actual-tag-list'); // 実際に送信されるタグのリスト
      
      // タグを画面に表示し、送信用のタグリストにも追加する関数
      function addAndDisplayTag(tagValue) {
          // タグが空でないか、すでに存在しないかを確認
          if (tagValue === "" || actualTagList.value.split(',').includes(tagValue)) {      
              return; // すでに存在する、または空のタグは登録されない
          }
  
          // タグを表示するためのspan要素を作成
          const tagSpan = document.createElement('span');
          tagSpan.className = 'badge badge-primary tag mr-2';
          tagSpan.textContent = tagValue;
          
          // タグの削除用のアイコンを作成
          const closeIcon = document.createElement('i');
          closeIcon.className = 'fas fa-times close-tag-icon';
          tagSpan.appendChild(closeIcon);
          
          // 作成したタグ要素を画面に追加
          tagsDisplay.appendChild(tagSpan);
  
          // 送信用のタグリストに新しいタグを追加
          const currentTags = actualTagList.value.split(',').filter(tag => tag !== "");
          currentTags.push(tagValue);
          actualTagList.value = currentTags.join(',');
      }
  
      // 既存のタグを初期表示する
      const initialTags = JSON.parse(tagsDisplay.getAttribute('data-tags') || '[]');
      initialTags.forEach(tag => {
          addAndDisplayTag(tag);
      });
      
      // タグ追加ボタンがクリックされたときの処理
      addTagBtn.addEventListener('click', function() {
          // タグ入力フィールドの値を取得
          const tagValue = tagInput.value.trim();
          // タグを画面と送信用リストに追加
          addAndDisplayTag(tagValue);
          // タグ入力フィールドをリセット
          tagInput.value = "";
      });
  
      // タグの削除アイコンがクリックされたときの処理
      tagsDisplay.addEventListener('click', function(e) {
          if (e.target.classList.contains('close-tag-icon')) {
              // クリックされたタグの値を取得
              const tagToRemove = e.target.parentNode.childNodes[0].nodeValue.trim();
              // タグを画面から削除
              e.target.parentNode.remove();
  
              // クリックされたタグを送信用のリストからも削除
              const currentTags = actualTagList.value.split(',');
              const index = currentTags.indexOf(tagToRemove);
              if (index > -1) {
                  currentTags.splice(index, 1);
                  actualTagList.value = currentTags.join(',');
              }
          }
      });
  });
</script>
